
GccApplicationC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800200  00800200  00000442  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000442  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d75  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4c  00000000  00000000  00001271  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000440  00000000  00000000  00001ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00002300  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000596  00000000  00000000  00002390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000012e  00000000  00000000  00002926  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__vector_17>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	4a c0       	rjmp	.+148    	; 0x10a <__vector_29>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 31       	cpi	r26, 0x16	; 22
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0b d1       	rcall	.+534    	; 0x31c <main>
 106:	61 c1       	rjmp	.+706    	; 0x3ca <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <__vector_29>:
#define SAMPLE_FREQ_HZ 10000

uint16_t tab[NB_OF_SAMPLES];
uint8_t wait=0, startadc=0;;

ISR (ADC_vect){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
	wait = 0;
 114:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <wait>
}
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_17>:

ISR(TIMER1_COMPA_vect) {
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
	startadc=1;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
}
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <InitADC>:


void InitADC()
{
	ADMUX |=(1<<REFS0);//zrodlo 
 140:	ec e7       	ldi	r30, 0x7C	; 124
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 64       	ori	r24, 0x40	; 64
 148:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADEN)|(1<<ADIE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);	//przerwania prescaler nable
 14a:	ea e7       	ldi	r30, 0x7A	; 122
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	8f 68       	ori	r24, 0x8F	; 143
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <ReadADC>:
	
}
uint16_t ReadADC(uint8_t ADCchannel)
{
	if (ADCchannel>7){		//jesli trzeba uzyc 2 rejestrów 
 156:	88 30       	cpi	r24, 0x08	; 8
 158:	78 f0       	brcs	.+30     	; 0x178 <ReadADC+0x22>
		ADCSRB|=(1<<MUX5);		//ustaw ten drugi
 15a:	eb e7       	ldi	r30, 0x7B	; 123
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	98 60       	ori	r25, 0x08	; 8
 162:	90 83       	st	Z, r25
		ADCchannel=ADCchannel-8;	//oblicz dla pierwszego
 164:	88 50       	subi	r24, 0x08	; 8
		ADMUX &= 0b11100000;		//wyzeruj aktualne ustawienie
 166:	ec e7       	ldi	r30, 0x7C	; 124
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	90 7e       	andi	r25, 0xE0	; 224
 16e:	90 83       	st	Z, r25
		ADMUX |= ADCchannel;		//ustaw kana³
 170:	90 81       	ld	r25, Z
 172:	89 2b       	or	r24, r25
 174:	80 83       	st	Z, r24
 176:	0c c0       	rjmp	.+24     	; 0x190 <ReadADC+0x3a>
	} else
	{
		ADCSRB &=!(1<<MUX5);		//wyzeruj aktualne
 178:	eb e7       	ldi	r30, 0x7B	; 123
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	90 81       	ld	r25, Z
 17e:	10 82       	st	Z, r1
		ADMUX &= 0b11100000;		//wyzeruj aktualne
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	90 7e       	andi	r25, 0xE0	; 224
 188:	90 83       	st	Z, r25
		ADMUX |= ADCchannel;		//ustaw kanal
 18a:	90 81       	ld	r25, Z
 18c:	89 2b       	or	r24, r25
 18e:	80 83       	st	Z, r24
	}
	wait=1;							//flaga czekania	
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <wait>
	ADCSRA |= (1<<ADSC);			//start konwersji
 196:	ea e7       	ldi	r30, 0x7A	; 122
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	80 64       	ori	r24, 0x40	; 64
 19e:	80 83       	st	Z, r24
	while(wait){					//czekanie
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <ReadADC+0x4e>
		asm ("nop");
 1a2:	00 00       	nop
		ADMUX &= 0b11100000;		//wyzeruj aktualne
		ADMUX |= ADCchannel;		//ustaw kanal
	}
	wait=1;							//flaga czekania	
	ADCSRA |= (1<<ADSC);			//start konwersji
	while(wait){					//czekanie
 1a4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <wait>
 1a8:	81 11       	cpse	r24, r1
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <ReadADC+0x4c>
		asm ("nop");
	}
	startadc=0;					//pomiar wykonany
 1ac:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	return ADC; //tutaj umiesc breakpoint
 1b0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 1b4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 1b8:	08 95       	ret

000001ba <InitTimer>:
void InitTimer(uint16_t freq)
{
	if (freq>3000)				//granice probkowania
 1ba:	89 3b       	cpi	r24, 0xB9	; 185
 1bc:	2b e0       	ldi	r18, 0x0B	; 11
 1be:	92 07       	cpc	r25, r18
 1c0:	10 f0       	brcs	.+4      	; 0x1c6 <InitTimer+0xc>
		freq=3000;
 1c2:	88 eb       	ldi	r24, 0xB8	; 184
 1c4:	9b e0       	ldi	r25, 0x0B	; 11
	if (freq==0)
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	11 f4       	brne	.+4      	; 0x1ce <InitTimer+0x14>
	 	freq=1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
		 
		 
	TCCR1A |=(1<<COM1A0);				//toggle mode
 1ce:	e0 e8       	ldi	r30, 0x80	; 128
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	20 81       	ld	r18, Z
 1d4:	20 64       	ori	r18, 0x40	; 64
 1d6:	20 83       	st	Z, r18
	TCCR1B |=(1<<WGM12);				//ctc
 1d8:	e1 e8       	ldi	r30, 0x81	; 129
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	20 81       	ld	r18, Z
 1de:	28 60       	ori	r18, 0x08	; 8
 1e0:	20 83       	st	Z, r18
	TIMSK1 |= (1<<OCIE1A);				//interrupt enable A compare
 1e2:	ef e6       	ldi	r30, 0x6F	; 111
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	20 81       	ld	r18, Z
 1e8:	22 60       	ori	r18, 0x02	; 2
 1ea:	20 83       	st	Z, r18
	
	if (freq>=200)				//w zaleznosci od F ustaw wyzeruj aktualne ustawienia, ustaw prescaler, wyzeruj licznik
 1ec:	88 3c       	cpi	r24, 0xC8	; 200
 1ee:	91 05       	cpc	r25, r1
 1f0:	f8 f0       	brcs	.+62     	; 0x230 <InitTimer+0x76>
		{
		OCR1A = (F_CPU/(2*1*(freq/2)))-1;		//oblicz OCR1A
 1f2:	9c 01       	movw	r18, r24
 1f4:	2e 7f       	andi	r18, 0xFE	; 254
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	74 e2       	ldi	r23, 0x24	; 36
 1fe:	84 ef       	ldi	r24, 0xF4	; 244
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	a5 d0       	rcall	.+330    	; 0x34e <__divmodsi4>
 204:	21 50       	subi	r18, 0x01	; 1
 206:	31 09       	sbc	r19, r1
 208:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 20c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		TCCR1A &= 0b11111000;				//wyzeruj prescaler
 210:	e0 e8       	ldi	r30, 0x80	; 128
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	88 7f       	andi	r24, 0xF8	; 248
 218:	80 83       	st	Z, r24
		TCCR1C |= (1<<FOC1A);				//wyzeruj licznik
 21a:	e2 e8       	ldi	r30, 0x82	; 130
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	80 68       	ori	r24, 0x80	; 128
 222:	80 83       	st	Z, r24
		TCCR1B |=(1<<CS10);					//ustaw prescaler
 224:	e1 e8       	ldi	r30, 0x81	; 129
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	80 81       	ld	r24, Z
 22a:	81 60       	ori	r24, 0x01	; 1
 22c:	80 83       	st	Z, r24
 22e:	08 95       	ret
		} 
	else if (freq>=30)
 230:	8e 31       	cpi	r24, 0x1E	; 30
 232:	91 05       	cpc	r25, r1
 234:	30 f1       	brcs	.+76     	; 0x282 <InitTimer+0xc8>
		{
		OCR1A = (F_CPU/(2*8*(freq/2)))-1;
 236:	9c 01       	movw	r18, r24
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	22 95       	swap	r18
 23e:	32 95       	swap	r19
 240:	30 7f       	andi	r19, 0xF0	; 240
 242:	32 27       	eor	r19, r18
 244:	20 7f       	andi	r18, 0xF0	; 240
 246:	32 27       	eor	r19, r18
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	74 e2       	ldi	r23, 0x24	; 36
 250:	84 ef       	ldi	r24, 0xF4	; 244
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	7c d0       	rcall	.+248    	; 0x34e <__divmodsi4>
 256:	21 50       	subi	r18, 0x01	; 1
 258:	31 09       	sbc	r19, r1
 25a:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 25e:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		TCCR1A &= 0b11111000;
 262:	e0 e8       	ldi	r30, 0x80	; 128
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	88 7f       	andi	r24, 0xF8	; 248
 26a:	80 83       	st	Z, r24
		TCCR1C |= (1<<FOC1A);
 26c:	e2 e8       	ldi	r30, 0x82	; 130
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 68       	ori	r24, 0x80	; 128
 274:	80 83       	st	Z, r24
		TCCR1B |=(1<<CS11);
 276:	e1 e8       	ldi	r30, 0x81	; 129
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	82 60       	ori	r24, 0x02	; 2
 27e:	80 83       	st	Z, r24
 280:	08 95       	ret
		}
	else if (freq>=3){
 282:	83 30       	cpi	r24, 0x03	; 3
 284:	91 05       	cpc	r25, r1
 286:	28 f1       	brcs	.+74     	; 0x2d2 <InitTimer+0x118>
		OCR1A = (F_CPU/(2*64*(freq/2)))-1;
 288:	9c 01       	movw	r18, r24
 28a:	36 95       	lsr	r19
 28c:	27 95       	ror	r18
 28e:	36 95       	lsr	r19
 290:	32 2f       	mov	r19, r18
 292:	22 27       	eor	r18, r18
 294:	37 95       	ror	r19
 296:	27 95       	ror	r18
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	74 e2       	ldi	r23, 0x24	; 36
 2a0:	84 ef       	ldi	r24, 0xF4	; 244
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	54 d0       	rcall	.+168    	; 0x34e <__divmodsi4>
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	31 09       	sbc	r19, r1
 2aa:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2ae:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		TCCR1A &= 0b11111000;
 2b2:	e0 e8       	ldi	r30, 0x80	; 128
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	80 83       	st	Z, r24
		TCCR1C |= (1<<FOC1A);
 2bc:	e2 e8       	ldi	r30, 0x82	; 130
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	80 83       	st	Z, r24
		TCCR1B |=(1<<CS10)|(1<<CS11);
 2c6:	e1 e8       	ldi	r30, 0x81	; 129
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	83 60       	ori	r24, 0x03	; 3
 2ce:	80 83       	st	Z, r24
 2d0:	08 95       	ret
		}
	else 
	{
		OCR1A = (F_CPU/(2*1024*(freq/2)))-1;
 2d2:	9c 01       	movw	r18, r24
 2d4:	36 95       	lsr	r19
 2d6:	27 95       	ror	r18
 2d8:	32 2f       	mov	r19, r18
 2da:	22 27       	eor	r18, r18
 2dc:	33 0f       	add	r19, r19
 2de:	33 0f       	add	r19, r19
 2e0:	33 0f       	add	r19, r19
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	74 e2       	ldi	r23, 0x24	; 36
 2ea:	84 ef       	ldi	r24, 0xF4	; 244
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	2f d0       	rcall	.+94     	; 0x34e <__divmodsi4>
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	31 09       	sbc	r19, r1
 2f4:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2f8:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		TCCR1A &= 0b11111000;
 2fc:	e0 e8       	ldi	r30, 0x80	; 128
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	88 7f       	andi	r24, 0xF8	; 248
 304:	80 83       	st	Z, r24
		TCCR1C |= (1<<FOC1A);
 306:	e2 e8       	ldi	r30, 0x82	; 130
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	80 68       	ori	r24, 0x80	; 128
 30e:	80 83       	st	Z, r24
		TCCR1B |= (1<<CS12);
 310:	e1 e8       	ldi	r30, 0x81	; 129
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	84 60       	ori	r24, 0x04	; 4
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret

0000031c <main>:
	
}

int main(void)
{	
	sei();
 31c:	78 94       	sei
	InitADC();
 31e:	10 df       	rcall	.-480    	; 0x140 <InitADC>
	InitTimer(3000);
 320:	88 eb       	ldi	r24, 0xB8	; 184
 322:	9b e0       	ldi	r25, 0x0B	; 11
 324:	4a df       	rcall	.-364    	; 0x1ba <InitTimer>
	int loop_ctr=0;
 326:	c0 e0       	ldi	r28, 0x00	; 0
 328:	d0 e0       	ldi	r29, 0x00	; 0
	

	while (1)
	{
		
if (startadc==1) {
 32a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 32e:	81 30       	cpi	r24, 0x01	; 1
	tab[loop_ctr]=ReadADC(1);
 330:	49 f4       	brne	.+18     	; 0x344 <main+0x28>
 332:	11 df       	rcall	.-478    	; 0x156 <ReadADC>
 334:	fe 01       	movw	r30, r28
 336:	ee 0f       	add	r30, r30
 338:	ff 1f       	adc	r31, r31
 33a:	ee 5f       	subi	r30, 0xFE	; 254
 33c:	fd 4f       	sbci	r31, 0xFD	; 253
 33e:	91 83       	std	Z+1, r25	; 0x01
 340:	80 83       	st	Z, r24
	loop_ctr++;
 342:	21 96       	adiw	r28, 0x01	; 1
	}
if((loop_ctr+1)==NB_OF_SAMPLES) 
 344:	c9 30       	cpi	r28, 0x09	; 9
 346:	d1 05       	cpc	r29, r1
 348:	81 f7       	brne	.-32     	; 0x32a <main+0xe>
	while (1) 
		asm ("nop");
 34a:	00 00       	nop
 34c:	fe cf       	rjmp	.-4      	; 0x34a <main+0x2e>

0000034e <__divmodsi4>:
 34e:	05 2e       	mov	r0, r21
 350:	97 fb       	bst	r25, 7
 352:	16 f4       	brtc	.+4      	; 0x358 <__divmodsi4+0xa>
 354:	00 94       	com	r0
 356:	0f d0       	rcall	.+30     	; 0x376 <__negsi2>
 358:	57 fd       	sbrc	r21, 7
 35a:	05 d0       	rcall	.+10     	; 0x366 <__divmodsi4_neg2>
 35c:	14 d0       	rcall	.+40     	; 0x386 <__udivmodsi4>
 35e:	07 fc       	sbrc	r0, 7
 360:	02 d0       	rcall	.+4      	; 0x366 <__divmodsi4_neg2>
 362:	46 f4       	brtc	.+16     	; 0x374 <__divmodsi4_exit>
 364:	08 c0       	rjmp	.+16     	; 0x376 <__negsi2>

00000366 <__divmodsi4_neg2>:
 366:	50 95       	com	r21
 368:	40 95       	com	r20
 36a:	30 95       	com	r19
 36c:	21 95       	neg	r18
 36e:	3f 4f       	sbci	r19, 0xFF	; 255
 370:	4f 4f       	sbci	r20, 0xFF	; 255
 372:	5f 4f       	sbci	r21, 0xFF	; 255

00000374 <__divmodsi4_exit>:
 374:	08 95       	ret

00000376 <__negsi2>:
 376:	90 95       	com	r25
 378:	80 95       	com	r24
 37a:	70 95       	com	r23
 37c:	61 95       	neg	r22
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	8f 4f       	sbci	r24, 0xFF	; 255
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	08 95       	ret

00000386 <__udivmodsi4>:
 386:	a1 e2       	ldi	r26, 0x21	; 33
 388:	1a 2e       	mov	r1, r26
 38a:	aa 1b       	sub	r26, r26
 38c:	bb 1b       	sub	r27, r27
 38e:	fd 01       	movw	r30, r26
 390:	0d c0       	rjmp	.+26     	; 0x3ac <__udivmodsi4_ep>

00000392 <__udivmodsi4_loop>:
 392:	aa 1f       	adc	r26, r26
 394:	bb 1f       	adc	r27, r27
 396:	ee 1f       	adc	r30, r30
 398:	ff 1f       	adc	r31, r31
 39a:	a2 17       	cp	r26, r18
 39c:	b3 07       	cpc	r27, r19
 39e:	e4 07       	cpc	r30, r20
 3a0:	f5 07       	cpc	r31, r21
 3a2:	20 f0       	brcs	.+8      	; 0x3ac <__udivmodsi4_ep>
 3a4:	a2 1b       	sub	r26, r18
 3a6:	b3 0b       	sbc	r27, r19
 3a8:	e4 0b       	sbc	r30, r20
 3aa:	f5 0b       	sbc	r31, r21

000003ac <__udivmodsi4_ep>:
 3ac:	66 1f       	adc	r22, r22
 3ae:	77 1f       	adc	r23, r23
 3b0:	88 1f       	adc	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	1a 94       	dec	r1
 3b6:	69 f7       	brne	.-38     	; 0x392 <__udivmodsi4_loop>
 3b8:	60 95       	com	r22
 3ba:	70 95       	com	r23
 3bc:	80 95       	com	r24
 3be:	90 95       	com	r25
 3c0:	9b 01       	movw	r18, r22
 3c2:	ac 01       	movw	r20, r24
 3c4:	bd 01       	movw	r22, r26
 3c6:	cf 01       	movw	r24, r30
 3c8:	08 95       	ret

000003ca <_exit>:
 3ca:	f8 94       	cli

000003cc <__stop_program>:
 3cc:	ff cf       	rjmp	.-2      	; 0x3cc <__stop_program>
